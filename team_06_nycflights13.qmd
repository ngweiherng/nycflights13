---
editor: 
  markdown: 
    wrap: 72
    title: Week 4 Team 06 Exercise 
    author: YEO SONG CHEN, LEE RU YUAN, TIMOTHY ZOE DELAYA, AGCANAS CLARENCE ANGELO MISAGAL, NG WEI HERNG
    date: 2024-05-28
date-format: "dddd MMM D, YYYY"

format: 
  html: 
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    number-depth: 3
    embed-resources: true
---

```{r}
#| label: setup
#| include: false

library(knitr)
library(DBI)
con_nycflights13 <- dbConnect(odbc::odbc(), dsn = "nycflights13")
```

# Task 1
## Team Members
![Team_06](img/img2.jpg)

## Syncing the Github Repository
![Push user different from owner](img/img1.jpg)

# Task 2

## Previewing Tables

```{sql}
#| connection=con_nycflights13

SELECT *
FROM airports
WHERE tzone = 'America/New_York';
```

```{sql}
#| connection=con_nycflights13

SELECT * 
FROM flights
```

## Task 2.1

```{sql}
#| connection=con_nycflights13

SELECT airport_code, airport_name, num_destinations,
       RANK() OVER (ORDER BY num_destinations DESC, airport_code ASC) AS rank
FROM (
    SELECT f.origin AS airport_code, a.name AS airport_name, COUNT(DISTINCT f.dest) AS num_destinations
    FROM flights f
    INNER JOIN airports a ON f.origin = a.faa
    WHERE f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY f.origin, a.name
) AS destinations_count
ORDER BY rank, airport_code;


```

## Task 2.2

```{sql}
#| connection=con_nycflights13
SELECT airport_code, airport_name, total_seats, rank
FROM (
    SELECT nf.dest AS airport_code, a.name AS airport_name, nf.total_seats,
           RANK() OVER (ORDER BY nf.total_seats DESC, nf.dest ASC) AS rank
    FROM (
        SELECT f.dest, SUM(p.seats) AS total_seats
        FROM flights f
        INNER JOIN planes p ON f.tailnum = p.tailnum
        WHERE f.origin IN ('JFK', 'LGA', 'EWR')
        GROUP BY f.dest
    ) nf
    INNER JOIN airports a ON nf.dest = a.faa
) ranked_destinations
WHERE rank <= 10
ORDER BY rank, airport_code;
  

```

## Task 2.3

```{sql}
#| connection=con_nycflights13
SELECT airport_code, airport_name, num_flights, rank
FROM (
    SELECT
        jf.dest AS airport_code,
        a.name AS airport_name,
        jf.num_flights,
        RANK() OVER (ORDER BY jf.num_flights DESC, jf.dest ASC) AS rank
    FROM (
        SELECT dest, COUNT(*) AS num_flights
        FROM flights
        WHERE origin = 'JFK'
        GROUP BY dest
    ) jf
    INNER JOIN airports a ON jf.dest = a.faa
) ranked_destinations
WHERE rank <= 10
ORDER BY rank, airport_code;

```

## Task 2.4

```{sql}
#| connection=con_nycflights13
SELECT ROUND((on_time_flights::numeric / total_flights) * 100, 2) AS percentage_on_time
FROM (
    SELECT 
        COUNT(*) FILTER (WHERE arr_delay <= 0) AS on_time_flights,
        COUNT(*) AS total_flights
    FROM flights
    WHERE dep_delay >= 30
) AS delayed_flights;

```

## Task 2.5

```{sql}
#| connection=con_nycflights13
SELECT 
    tailnum,
    manufacturer,
    model,
    mean_speed,
    rank
FROM (
    SELECT 
        tailnum,
        manufacturer,
        model,
        mean_speed,
        RANK() OVER (ORDER BY mean_speed DESC) AS rank
    FROM (
        SELECT 
            f.tailnum,
            p.manufacturer,
            p.model,
            AVG(f.distance / NULLIF(f.air_time, 0) * 60.0) AS mean_speed,
            COUNT(*) AS flight_count
        FROM flights f
        JOIN planes p ON f.tailnum = p.tailnum
        WHERE f.origin IN ('JFK', 'LGA', 'EWR')
        GROUP BY f.tailnum, p.manufacturer, p.model
        HAVING COUNT(*) >= 10
    ) AS flight_speeds
) AS ranked_speeds
WHERE rank <= 10
ORDER BY rank, tailnum;
```

# Task 3
## Task 3.1
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true
-- Question 1
DROP VIEW IF EXISTS chicago_airports;

CREATE VIEW chicago_airports AS
SELECT faa, name
FROM airports
WHERE name LIKE '%Chicago%';
```
```{sql}
#| connection: con_nycflights13
SELECT *
FROM chicago_airports;
```
## Task 3.2
```{sql}
#| connection=con_nycflights13
-- Question 2
WITH nyc_to_chicago_flights AS (
    SELECT
        f.dest AS destination_code,
        a.name AS destination_name,
        COUNT(*) AS num_flights
    FROM
        flights f
    JOIN
        airports a ON f.dest = a.faa
    JOIN
        airports nyc ON f.origin = nyc.faa
    WHERE
        nyc.faa IN ('JFK', 'LGA', 'EWR')
        AND a.faa IN (SELECT faa FROM chicago_airports)
    GROUP BY
        f.dest, a.name
),
ranked_flights AS (
    SELECT
        destination_code,
        destination_name,
        num_flights,
        RANK() OVER (ORDER BY num_flights DESC, destination_code) AS rank
    FROM
        nyc_to_chicago_flights
)
SELECT
    destination_code,
    destination_name,
    num_flights,
    rank
FROM
    ranked_flights
ORDER BY
    rank,
    destination_code;
```
## Task 3.3
```{sql}
#| connection=con_nycflights13

WITH nyc_to_chicago_flights AS (
    SELECT
        f.carrier AS airline_code,
        a.name AS airline_name,
        COUNT(*) AS num_flights
    FROM
        flights f
    JOIN
        airlines a ON f.carrier = a.carrier
    JOIN
        airports nyc ON f.origin = nyc.faa
    JOIN
        airports chicago ON f.dest = chicago.faa
    WHERE
        nyc.faa IN ('JFK', 'LGA', 'EWR')
        AND chicago.faa IN (SELECT faa FROM chicago_airports)
    GROUP BY
        f.carrier, a.name
),
ranked_flights AS (
    SELECT
        airline_code,
        airline_name,
        num_flights,
        RANK() OVER (ORDER BY num_flights DESC, airline_code) AS rank
    FROM
        nyc_to_chicago_flights
)
SELECT
    airline_code,
    airline_name,
    num_flights,
    rank
FROM
    ranked_flights
ORDER BY
    rank,
    airline_code;
```
## Task 3.4
```{sql}
#| connection=con_nycflights13

WITH nyc_to_chicago_flights AS (
    SELECT
        p.manufacturer AS manufacturer,
        p.model AS model,
        COUNT(*) AS num_flights
    FROM
        flights f
    JOIN
        planes p ON f.tailnum = p.tailnum
    JOIN
        airports nyc ON f.origin = nyc.faa
    JOIN
        airports chicago ON f.dest = chicago.faa
    WHERE
        nyc.faa IN ('JFK', 'LGA', 'EWR')
        AND chicago.faa IN (SELECT faa FROM chicago_airports)
    GROUP BY
        p.manufacturer, p.model
),
ranked_flights AS (
    SELECT
        manufacturer,
        model,
        num_flights,
        RANK() OVER (ORDER BY num_flights DESC, manufacturer, model) AS rank
    FROM
        nyc_to_chicago_flights
)
SELECT
    manufacturer,
    model,
    num_flights,
    rank
FROM
    ranked_flights
WHERE
    rank <= 10
ORDER BY
    rank,
    manufacturer,
    model;
```
## Task 3.5
```{sql}
#| connection=con_nycflights13

WITH nyc_to_chicago_seats AS (
    SELECT
        nyc.faa AS origin_code,
        nyc.name AS origin_name,
        chicago.faa AS dest_code,
        chicago.name AS dest_name,
        SUM(p.seats) AS total_seats
    FROM
        flights f
    JOIN
        airports nyc ON f.origin = nyc.faa
    JOIN
        airports chicago ON f.dest = chicago.faa
    JOIN
        planes p ON f.tailnum = p.tailnum
    WHERE
        nyc.faa IN ('JFK', 'LGA', 'EWR')
        AND chicago.faa IN (SELECT faa FROM chicago_airports)
    GROUP BY
        nyc.faa, nyc.name, chicago.faa, chicago.name
),
ranked_seats AS (
    SELECT
        origin_code,
        origin_name,
        dest_code,
        dest_name,
        total_seats,
        RANK() OVER (ORDER BY total_seats DESC, origin_code, dest_code) AS rank
    FROM
        nyc_to_chicago_seats
)
SELECT
    origin_code,
    origin_name,
    dest_code,
    dest_name,
    total_seats,
    rank
FROM
    ranked_seats
ORDER BY
    total_seats DESC,
    origin_code,
    dest_code;
```

# Task 4

## Task 4.1

```{sql}
#| connection=con_nycflights13
SELECT 
    COUNT(*) AS missing_combinations
FROM (
    SELECT DISTINCT f.origin, f.time_hour
    FROM flights f
    LEFT JOIN weather w
    ON f.origin = w.origin AND f.time_hour = w.time_hour
    WHERE w.origin IS NULL
) AS missing;

```

## Task 4.2

```{sql}
#| connection=con_nycflights13
SELECT 
    airport_code,
    airport_name,
    is_dry,
    ROUND((on_time_flights::numeric / total_flights) * 100, 2) AS on_time_percentage
FROM (
    SELECT 
        f.origin AS airport_code,
        a.name AS airport_name,
        (w.precip = 0) AS is_dry,
        COUNT(*) AS total_flights,
        SUM(CASE WHEN f.dep_delay <= 0 THEN 1 ELSE 0 END) AS on_time_flights
    FROM flights f
    JOIN weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
    JOIN airports a ON f.origin = a.faa
    WHERE f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY f.origin, a.name, is_dry
) AS on_time_departures
ORDER BY airport_code, is_dry;



```

## Task 4.3

```{sql}
#| connection=con_nycflights13
SELECT 
    airport_code,
    airport_name,
    mean_departure_delay,
    rank
FROM (
    SELECT 
        airport_code,
        airport_name,
        mean_departure_delay,
        RANK() OVER (ORDER BY mean_departure_delay ASC) AS rank
    FROM (
        SELECT 
            f.origin AS airport_code,
            a.name AS airport_name,
            ROUND(AVG(f.dep_delay), 2) AS mean_departure_delay
        FROM flights f
        JOIN weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
        JOIN airports a ON f.origin = a.faa
        WHERE f.origin IN ('JFK', 'LGA', 'EWR') AND w.visib < 1
        GROUP BY f.origin, a.name
    ) AS mean_delays
) AS ranked_delays
ORDER BY rank, airport_code;


```

## Task 4.4

```{sql}
#| connection=con_nycflights13
SELECT 
    CAST(CORR(dw.mean_temp, dd.mean_dep_delay) AS DECIMAL(10, 2)) AS correlation_coefficient
FROM (
    SELECT 
        origin,
        DATE(time_hour) AS day,
        AVG(temp) AS mean_temp
    FROM weather
    GROUP BY origin, DATE(time_hour)
) AS dw
JOIN (
    SELECT 
        origin,
        DATE(time_hour) AS day,
        AVG(dep_delay) AS mean_dep_delay
    FROM flights
    GROUP BY origin, DATE(time_hour)
) AS dd
ON dw.origin = dd.origin AND dw.day = dd.day;


```

## Task 4.5

```{sql}
#| connection=con_nycflights13
SELECT 
    wind_direction,
    ROUND(AVG(air_time), 2) AS mean_air_time
FROM (
    SELECT 
        f.air_time,
        CASE 
            WHEN w.wind_dir BETWEEN 135 AND 225 THEN 'south'
            WHEN w.wind_dir BETWEEN 0 AND 45 OR w.wind_dir BETWEEN 315 AND 360 THEN 'north'
            ELSE NULL
        END AS wind_direction
    FROM flights f
    JOIN weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
    WHERE f.dest = 'BTV'
) AS flight_times
WHERE wind_direction IS NOT NULL
GROUP BY wind_direction
ORDER BY wind_direction;


```

```{r}
library(DBI)
con_nycflights13 <- dbConnect(odbc::odbc(), dsn = "nycflights13")
```
